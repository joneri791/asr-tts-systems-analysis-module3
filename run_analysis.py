#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('database_tools')
sys.path.append('analysis')
sys.path.append('visualization')

from database_tools.database_config import init_database
from database_tools.data_loader import DataLoader
from analysis.data_analysis import DataAnalyzer
from visualization.visualization import DataVisualizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'analysis_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'),
        logging.StreamHandler()
    ]
)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    """
    logging.info("=== –ù–ê–ß–ê–õ–û –§–ê–ó–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ò –ê–ù–ê–õ–ò–ó–ê ===")
    
    try:
        # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logging.info("–®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        init_database()
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logging.info("–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É")
        loader = DataLoader()
        loader.load_all_data()
        
        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        logging.info("–®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        analyzer = DataAnalyzer()
        results = analyzer.run_full_analysis()
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        logging.info("–®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π")
        visualizer = DataVisualizer()
        visualizer.create_all_visualizations()
        
        # –®–∞–≥ 5: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logging.info("–®–∞–≥ 5: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print_analysis_summary(results)
        
        logging.info("=== –§–ê–ó–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ò –ê–ù–ê–õ–ò–ó–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise

def print_analysis_summary(results):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    print("\n" + "="*60)
    print("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê")
    print("="*60)
    
    # –û–±—â–∏–π –æ–±–∑–æ—Ä
    overview = results['overview']
    print(f"\nüìä –û–ë–©–ò–ô –û–ë–ó–û–†:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º: {overview['total_systems']}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {overview['unique_developers']}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {overview['avg_downloads']:.0f}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {overview['earliest_year']} - {overview['latest_year']}")
    
    # –¢–æ–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if results['top_developers']:
        print(f"\nüë®‚Äçüíª –¢–û–ü –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ò:")
        for i, dev in enumerate(results['top_developers'][:5], 1):
            print(f"   {i}. {dev['developer']}: {dev['system_count']} —Å–∏—Å—Ç–µ–º")
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    if results['architecture_distribution']:
        print(f"\nüèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
        for i, arch in enumerate(results['architecture_distribution'][:5], 1):
            print(f"   {i}. {arch['architecture']}: {arch['count']} —Å–∏—Å—Ç–µ–º")
    
    # –ê–Ω–∞–ª–∏–∑ WER
    if results['wer_vs_year']:
        wer_data = results['wer_vs_year']
        best_wer = min(wer_data, key=lambda x: x['wer'])
        print(f"\nüéØ –õ–£–ß–®–ò–ô WER:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {best_wer['model_name']}")
        print(f"   ‚Ä¢ WER: {best_wer['wer']:.2f}%")
        print(f"   ‚Ä¢ –ì–æ–¥: {best_wer['year']}")
        print(f"   ‚Ä¢ –î–∞—Ç–∞—Å–µ—Ç: {best_wer['dataset']}")
    
    # –ê–Ω–∞–ª–∏–∑ MOS
    if results['mos_vs_year']:
        mos_data = results['mos_vs_year']
        best_mos = max(mos_data, key=lambda x: x['mos'])
        print(f"\nüéµ –õ–£–ß–®–ò–ô MOS:")
        print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {best_mos['model_name']}")
        print(f"   ‚Ä¢ MOS: {best_mos['mos']:.2f}")
        print(f"   ‚Ä¢ –ì–æ–¥: {best_mos['year']}")
        print(f"   ‚Ä¢ –î–∞—Ç–∞—Å–µ—Ç: {best_mos['dataset']}")
    
    # –ë–µ–Ω—á–º–∞—Ä–∫–∏
    if results['benchmark_analysis']:
        print(f"\nüèÜ –ë–ï–ù–ß–ú–ê–†–ö–ò:")
        benchmark_count = len(set(r['benchmark_name'] for r in results['benchmark_analysis']))
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤: {benchmark_count}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results['benchmark_analysis'])}")
    
    # –î–∞—Ç–∞—Å–µ—Ç—ã
    if results['dataset_analysis']:
        print(f"\nüìö –î–ê–¢–ê–°–ï–¢–´:")
        total_hours = sum(d.get('size_hours', 0) for d in results['dataset_analysis'])
        total_gb = sum(d.get('size_gb', 0) for d in results['dataset_analysis'])
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤: {len(results['dataset_analysis'])}")
        print(f"   ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_hours:.0f} —á–∞—Å–æ–≤, {total_gb:.0f} –ì–ë")
    
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    print(f"   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏: wer_vs_year.png, mos_vs_year.png, architecture_distribution.png")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏: interactive_wer.html")
    print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: asr_tts_systems.db (SQLite)")
    print(f"   ‚Ä¢ –õ–æ–≥ –∞–Ω–∞–ª–∏–∑–∞: analysis_log_*.txt")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()
